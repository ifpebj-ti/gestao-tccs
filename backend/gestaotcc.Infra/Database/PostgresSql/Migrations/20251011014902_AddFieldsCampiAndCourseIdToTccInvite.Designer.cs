// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using gestaotcc.Infra.Database;

#nullable disable

namespace gestaotcc.Infra.Database.PostgresSql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251011014902_AddFieldsCampiAndCourseIdToTccInvite")]
    partial class AddFieldsCampiAndCourseIdToTccInvite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocumentTypeEntityProfileEntity", b =>
                {
                    b.Property<long>("DocumentTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProfilesId")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentTypesId", "ProfilesId");

                    b.HasIndex("ProfilesId");

                    b.ToTable("documentType_profile", (string)null);
                });

            modelBuilder.Entity("ProfileEntityUserEntity", b =>
                {
                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("ProfileId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("user_profile", (string)null);
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.AccessCode.AccessCodeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserUpdatePassword")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AccessCodes");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Campi.CampiEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Campi");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.CampiCourse.CampiCourseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CampiId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CampiId");

                    b.HasIndex("CourseId");

                    b.ToTable("CampiCourses");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Course.CourseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Document.DocumentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TccId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("TccId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.DocumentType.DocumentTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("MethodSignature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("SignatureOrder")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Profile.ProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Signature.SignatureEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SignatureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Tcc.TccEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Summary")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Tccs");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.TccCancellation.TccCancellationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("PENDING");

                    b.Property<long>("TccId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TccId")
                        .IsUnique();

                    b.ToTable("TccCancellations");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.TccInvite.TccInviteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CampiId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsValidCode")
                        .HasColumnType("boolean");

                    b.Property<long>("TccId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TccId");

                    b.ToTable("TccInvites");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.TccSchedule.TccScheduleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TccId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TccId")
                        .IsUnique();

                    b.ToTable("TccSchedules");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.User.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<long?>("CampiCourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Registration")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SIAPE")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("CampiCourseId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.UserTcc.UserTccEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BindingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<long>("TccId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TccId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTccs");
                });

            modelBuilder.Entity("DocumentTypeEntityProfileEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.DocumentType.DocumentTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("DocumentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestaotcc.Domain.Entities.Profile.ProfileEntity", null)
                        .WithMany()
                        .HasForeignKey("ProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProfileEntityUserEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.Profile.ProfileEntity", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestaotcc.Domain.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.AccessCode.AccessCodeEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.User.UserEntity", "User")
                        .WithOne("AccessCode")
                        .HasForeignKey("gestaotcc.Domain.Entities.AccessCode.AccessCodeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.CampiCourse.CampiCourseEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.Campi.CampiEntity", "Campi")
                        .WithMany("CampiCourses")
                        .HasForeignKey("CampiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestaotcc.Domain.Entities.Course.CourseEntity", "Course")
                        .WithMany("CampiCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campi");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Document.DocumentEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.DocumentType.DocumentTypeEntity", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestaotcc.Domain.Entities.Tcc.TccEntity", "Tcc")
                        .WithMany("Documents")
                        .HasForeignKey("TccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestaotcc.Domain.Entities.User.UserEntity", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId");

                    b.Navigation("DocumentType");

                    b.Navigation("Tcc");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Signature.SignatureEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.Document.DocumentEntity", "Document")
                        .WithMany("Signatures")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestaotcc.Domain.Entities.User.UserEntity", "User")
                        .WithMany("Signatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.TccCancellation.TccCancellationEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.Tcc.TccEntity", "Tcc")
                        .WithOne("TccCancellation")
                        .HasForeignKey("gestaotcc.Domain.Entities.TccCancellation.TccCancellationEntity", "TccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tcc");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.TccInvite.TccInviteEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.Tcc.TccEntity", "Tcc")
                        .WithMany("TccInvites")
                        .HasForeignKey("TccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tcc");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.TccSchedule.TccScheduleEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.Tcc.TccEntity", "Tcc")
                        .WithOne("TccSchedule")
                        .HasForeignKey("gestaotcc.Domain.Entities.TccSchedule.TccScheduleEntity", "TccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tcc");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.User.UserEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.CampiCourse.CampiCourseEntity", "CampiCourse")
                        .WithMany("Users")
                        .HasForeignKey("CampiCourseId");

                    b.Navigation("CampiCourse");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.UserTcc.UserTccEntity", b =>
                {
                    b.HasOne("gestaotcc.Domain.Entities.Profile.ProfileEntity", "Profile")
                        .WithMany("UserTccs")
                        .HasForeignKey("ProfileId");

                    b.HasOne("gestaotcc.Domain.Entities.Tcc.TccEntity", "Tcc")
                        .WithMany("UserTccs")
                        .HasForeignKey("TccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestaotcc.Domain.Entities.User.UserEntity", "User")
                        .WithMany("UserTccs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Tcc");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Campi.CampiEntity", b =>
                {
                    b.Navigation("CampiCourses");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.CampiCourse.CampiCourseEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Course.CourseEntity", b =>
                {
                    b.Navigation("CampiCourses");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Document.DocumentEntity", b =>
                {
                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.DocumentType.DocumentTypeEntity", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Profile.ProfileEntity", b =>
                {
                    b.Navigation("UserTccs");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.Tcc.TccEntity", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("TccCancellation");

                    b.Navigation("TccInvites");

                    b.Navigation("TccSchedule");

                    b.Navigation("UserTccs");
                });

            modelBuilder.Entity("gestaotcc.Domain.Entities.User.UserEntity", b =>
                {
                    b.Navigation("AccessCode")
                        .IsRequired();

                    b.Navigation("Documents");

                    b.Navigation("Signatures");

                    b.Navigation("UserTccs");
                });
#pragma warning restore 612, 618
        }
    }
}
