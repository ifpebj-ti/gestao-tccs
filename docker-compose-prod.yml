version: '3.8'

services:
  backend:
    image: ghcr.io/ifpebj-ti/gestaotccs-backend:latest
    container_name: gestao-backend
    ports:
      - "${PORT_MACHINE_BACKEND}:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    restart: unless-stopped
    networks:
      - front_net
      - back_net
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    image: ghcr.io/ifpebj-ti/gestaotccs-frontend:latest
    container_name: gestao-frontend
    ports:
      - "${PORT_MACHINE_FRONTEND}:3000"
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - front_net

  postgres:
    image: postgres:15
    container_name: gestao-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${PORT_MACHINE_POSTGRES}:5432"
    restart: unless-stopped
    networks:
      - back_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:

networks:
  front_net:
  back_net:
