name: Backend CI/CD Workflow

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - "backend/**"

  workflow_dispatch:

jobs:
  # --------------------------------------------------------------------
  # 0) TAG CREATION ----------------------------------------------------
  # --------------------------------------------------------------------
  tag-creation:
    name: 0. Automatic Creation Process of New Tags
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      created_tag: ${{ steps.created_tag.outputs.created_tag }}
      change_type: ${{ steps.change_type.outputs.change_type }}

    steps:
      - uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Extract type of change from PR
        id: change_type
        run: |
          echo "${{ github.event.pull_request.body }}" > body.txt

          change_type=""
          if grep -q "\[x\] novo-marco" body.txt; then
            change_type="novo-marco"
          elif grep -q "\[x\] nova-feature-refactor" body.txt; then
            change_type="nova-feature-refactor"
          elif grep -q "\[x\] bug-fix" body.txt; then
            change_type="bug-fix"
          elif grep -q "\[x\] outros" body.txt; then
            change_type="outros"
          else
            echo "No option scheduled correctly in 'change_type:'"
            exit 1
          fi

          echo "change_type=$change_type" >> "$GITHUB_OUTPUT"

      - name: Get the last release tag
        id: last_tag
        run: |
          gh auth setup-git
          tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [[ -z "$tag" ]]; then tag="0.0.0"; fi
          echo "last_tag=$tag" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

      - name: Calculate new tag
        id: created_tag
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.last_tag.outputs.last_tag }}"
          case "${{ steps.change_type.outputs.change_type }}" in
            bug-fix)
              patch=$((patch + 1))
              ;;
            nova-feature-refactor)
              minor=$((minor + 1)); 
              patch=0
              ;;
            novo-marco)
              major=$((major + 1)); 
              minor=0; 
              patch=0
              ;;
            outros) 
              # Does not change anything, only keeps the values of the last tag
              ;;
          esac
          created_tag="${major}.${minor}.${patch}"
          echo "New tag: $created_tag"
          echo "created_tag=$created_tag" >> "$GITHUB_OUTPUT"

  # --------------------------------------------------------------------
  # 1) BACKEND DOCKER --------------------------------------------------
  # --------------------------------------------------------------------
  backend-docker:
    name: 1. Backend CI/CD
    runs-on: ubuntu-latest
    needs: tag-creation
    env:
      CREATED_TAG: ${{ needs.tag-creation.outputs.created_tag }}
    if: >
      (github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      packages: write
      security-events: write
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0"

      - name: Restore dependencies
        run: dotnet restore

      - name: Run Tests
        run: dotnet test --no-build --verbosity normal

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/gestaotccs-backend:$CREATED_TAG \
            -f Dockerfile .
      
      - name: Tag image as latest
        run: |
          docker tag ghcr.io/${{ github.repository_owner }}/gestaotccs-backend:$CREATED_TAG ghcr.io/${{ github.repository_owner }}/gestaotccs-backend:latest

      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}

      - name: Install Docker Scout
        run: |
          curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
          sh install-scout.sh

      - name: Scan image for critical vulnerabilities
        run: |
          docker scout cves "--only-severity=critical --exit-code 1 ghcr.io/${{ github.repository_owner }}/gestaotccs-backend:$CREATED_TAG"
          docker scout quickview ghcr.io/${{ github.repository_owner }}/gestaotccs-backend:$CREATED_TAG

      - name: Push Docker images (version and latest)
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/gestaotccs-backend:$CREATED_TAG
          docker push ghcr.io/${{ github.repository_owner }}/gestaotccs-backend:latest
      
      - name: Trigger Portainer webhook to update Backend service
        run: curl -X POST ${{ secrets.PORTAINER_WEBHOOK_BACKEND }}

  # --------------------------------------------------------------------
  # 3) RELEASE CREATION ------------------------------------------------
  # --------------------------------------------------------------------
  release-creation:
    name: 3. Automatic Creation Process of New Releases
    runs-on: ubuntu-latest
    needs: [tag-creation, backend-docker]
    env:
      CREATED_TAG: ${{ needs.tag-creation.outputs.created_tag }}
      CHANGE_TYPE: ${{ needs.tag-creation.outputs.change_type }}
    steps:
      - uses: actions/checkout@v4

      - name: Release Publication
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CREATED_TAG }}
          name: Release ${{ env.CREATED_TAG }}
          generate_release_notes: true
          body: |
            Release automatically generated from the request #${{ github.event.pull_request.number }}
            Type of change: ${{ env.CHANGE_TYPE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
